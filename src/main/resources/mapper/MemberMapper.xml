<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="memberDao">
  	
  	<resultMap type="member" id="member">
  		<result column="rn" property="rowNum"/>
  		<result column="mem_idx" property="memIdx"/>
  		<result column="mem_id" property="memId"/>
  		<result column="mem_name" property="memName"/>
  		<result column="mem_pwd" property="memPwd"/>
  		<result column="mem_auth" property="memAuth"/>
  		<result column="mem_gender" property="memGender"/>
  		<result column="mem_phone" property="memPhone"/>
  		<result column="mem_email" property="memEmail"/>
  		<result column="regist_date" property="registDate"/>
  		<result column="update_date" property="updateDate"/>
  		<result column="regist_id" property="registId"/>
  		<result column="update_id" property="updateIp"/>
  		<result column="regist_ip" property="registIp"/>
  		<result column="update_ip" property="updateIp"/>
  		<result column="mem_ip" property="memIp"/>
  		<result column="follow_idx" property="followIdx"/>
  		<result column="mem_id" property="memId"/>
  		<result column="to_mem_id" property="toMemId"/>
  		<result column="file_name" property="fileName"/>
  		<result column="file_path" property="filePath"/>
  		<result column="file_uuid" property="fileUuid"/>
  		
  	</resultMap> 
  	
  	<select id="loginCheck" parameterType="hashmap" resultMap="member">
	select *
	from youtube_member_jjh
	where mem_id = #{memId} and mem_pwd = #{memPwd}	
  	
  	</select>
  	
  	<select id="idCheck" parameterType="String" resultType="Integer">
	SELECT count(*)
	FROM   youtube_member_jjh
	WHERE  mem_id = #{memId}
	</select>
	
	<select id="pwdCheck" parameterType="String" resultType="Integer">
	SELECT count(*)
	FROM   youtube_member_jjh
	WHERE  mem_pwd = #{memPwd}
	</select>
	
	<insert id="registerMember" parameterType="member">
	/*회원 기본정보,이미지 등록 쿼리*/
			insert into youtube_member_jjh(
			mem_idx,
			mem_id,
			mem_name,
			mem_pwd,
			mem_auth,
			mem_gender,
			mem_phone,
			mem_email,
			regist_date,
			mem_ip,
			file_name,
			file_path,
			file_uuid)
	values(
			youtube_member_jjh_seq.nextval,
			#{memId},
			#{memName},
			#{memPwd},
			'member',
			#{memGender},
			#{memPhone},
			#{memEmail},
			 SYSDATE,
			#{memIp},
			#{fileName},
			#{filePath},
			#{fileUuid})
	</insert>
	
<!-- <insert id="insertImgFile" parameterType="member">
	/*이미지 등록 쿼리*/
		insert into youtube_member_jjh(
			file_name,
			file_path,
			file_uuid)
		values(
			#{fileName},
			#{filePath},
			#{fileUuid})
	</insert> -->
	
	
	<select id="memberList" resultMap="member">
	SELECT * FROM
		(SELECT ROWNUM AS RN, a.*
		 FROM (SELECT mem_idx, 
					  mem_id, 
					  mem_name, 
					  mem_gender, 
					  mem_email, 
					  mem_phone, 
					  <!-- regist_date, update_date,-->
					  to_char(regist_date,'YYYY-MM-DD') as regist_date,
					  to_char(update_date,'yyyy-mm-dd') as update_date,
					  <!-- mem_ip -->
					  rpad(substr(mem_ip, 11, 5),10,'*') as mem_ip
					 
			   FROM youtube_member_jjh
			   WHERE 1=1
				<if test="searchCondition != null and searchCondition != ''">
					<choose>
						<when test="searchCondition == 'memId'">
							 AND mem_id LIKE '%${memSearchWord}%'
						</when>
						<when test="searchCondition == 'memName'">
							 AND mem_name LIKE '%${memSearchWord}%'
						</when>
					</choose>	
				</if>
			   ORDER BY mem_idx DESC) a)
			   <![CDATA[
			   WHERE RN BETWEEN (#{criteria.page} - 1) * #{criteria.perPageNum} + 1 AND #{criteria.page} * #{criteria.perPageNum}
			]]>
	</select>

	<select id="memberListCount" resultType="Integer" >
	SELECT 
		COUNT(DISTINCT mem_idx)
    FROM youtube_member_jjh
	WHERE 1=1
		<if test="searchCondition != null and searchCondition != ''">
			<choose>
				<when test="searchCondition == 'memId'">
					 AND mem_id LIKE '%${memSearchWord}%'
				</when>
				<when test="searchCondition == 'memName'">
					 AND mem_name LIKE '%${memSearchWord}%'
				</when>
			</choose>	
		</if>
	</select>
	
	<select id="memberDetail" resultMap="member" parameterType="member">
		SELECT mem_idx,
			   mem_id,
			   mem_name,
			   mem_gender,
			   mem_pwd,
			   mem_email,
			   mem_phone,
			   mem_auth,
			   file_name,
			   file_path,
			   file_uuid,
			   to_char(regist_date,'yyyy-mm-dd') as regist_date,
			   to_char(update_date,'yyyy-mm-dd') as update_date,
			   mem_ip	 
		FROM   youtube_member_jjh
		WHERE  mem_idx = #{memIdx}
	</select>
	
	<update id="updateMember" parameterType="member">
		UPDATE  youtube_member_jjh
		SET		mem_name = #{memName},
			    mem_gender = #{memGender},
			    mem_pwd = #{memPwd},
			    mem_email = #{memEmail},
			    mem_phone = #{memPhone},
			    <!-- regist_date = #{registDate},  -->
			    update_date = SYSDATE,
			    mem_ip = #{memIp},
			    file_name = #{fileName},
			    file_path = #{filePath},
			    file_uuid = #{fileUuid}
		WHERE	mem_idx = #{memIdx}
	</update>
  	
  	<delete id="deleteMember" parameterType="Integer">
  	delete from youtube_member_jjh
  	where mem_idx = #{memIdx}
  	
  	</delete>
  	
  	<!-- 구독 여부 확인 -->
  	<select id="memberFindFollow" resultType="int" parameterType="member">
  	/*구독 여부 확인*/
  		select count(*)
  		from youtube_follow_jjh
  		where to_mem_id = #{toMemId} and mem_id = #{memId}
  	</select>
  	
  	<!-- 구독 하기 -->
  	<insert id="memberFollow" parameterType="member">
  		insert into youtube_follow_jjh(
  			follow_idx,
  			mem_id,
  			to_mem_id
  		)
  		values(
  			youtube_follow_jjh_seq.nextval,
  			#{memId},
  			#{toMemId}
  		)
  	
  	</insert>
  	
  	<!-- 구독 취소 하기 -->
  	<delete id="memberRemoveFollow" parameterType="member">
  	/*memberRemoveFollow쿼리*/
  		delete from youtube_follow_jjh
  		where to_mem_id = #{toMemId} and mem_id = #{memId}
  	</delete>
  	
  	<!-- 구독 개수 -->
  	<select id="memberFollowCount" resultType="int">
  	/*memberDao.memberFollowCount*/
  		select count(follow_idx)
  		from youtube_follow_jjh
  		where to_mem_id = #{toMemId}
  	</select>
  	
  	
  	
  </mapper>